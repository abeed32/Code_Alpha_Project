

import numpy as np
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix


iris = load_iris()
X = iris.data 
y = iris.target  


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)


clf = RandomForestClassifier(n_estimators=100, random_state=42)


clf.fit(X_train, y_train)


y_pred = clf.predict(X_test)


accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")


print("\nClassification Report:")
print(classification_report(y_test, y_pred, target_names=iris.target_names))


print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred))


sample = np.array([[5.1, 3.5, 1.4, 0.2]])  # Example feature values
prediction = clf.predict(sample)
print(f"\nPrediction for sample {sample}: {iris.target_names[prediction[0]]}")
TASK 2

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import LabelEncoder

folder_path = r'C:\Users\HP\Downloads\Unemployment'  

files = os.listdir(folder_path)

print("Files in the folder:")
print(files)

file_path = os.path.join(folder_path, files[0])  
data = pd.read_csv(file_path)


print("\nFirst Few Rows:")
print(data.head())
print("\nDataset Info:")
print(data.info())
print("\nSummary Statistics:")
print(data.describe())


print("\nMissing Values:")
print(data.isnull().sum())


data.fillna(data.select_dtypes(include=[np.number]).mean(), inplace=True)


columns_to_drop = ['Unnamed: 0']  
data.drop(columns=columns_to_drop, axis=1, inplace=True, errors='ignore')


if 'Date' in data.columns:
    data['Date'] = pd.to_datetime(data['Date'], errors='coerce')


categorical_columns = data.select_dtypes(include=['object']).columns

for col in categorical_columns:
    if data[col].dtype == 'object': 
        label_encoder = LabelEncoder()
        data[col] = label_encoder.fit_transform(data[col].astype(str))


if 'Date' in data.columns and 'Unemployment Rate' in data.columns:
    plt.figure(figsize=(10, 6))
    sns.lineplot(data=data, x='Date', y='Unemployment Rate', marker='o', label='Unemployment Rate')
    plt.title("Unemployment Rate Over Time")
    plt.xlabel("Date")
    plt.ylabel("Unemployment Rate (%)")
    plt.xticks(rotation=45)
    plt.legend()
    plt.show()
else:
    print("Columns 'Date' or 'Unemployment Rate' not found for visualization.")


if 'Unemployment Rate' in data.columns:
    plt.figure(figsize=(8, 5))
    sns.histplot(data['Unemployment Rate'], kde=True, bins=20, color='blue')
    plt.title("Distribution of Unemployment Rate")
    plt.xlabel("Unemployment Rate (%)")
    plt.ylabel("Frequency")
    plt.show()

plt.figure(figsize=(8, 6))
sns.heatmap(data.corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.title("Correlation Heatmap")
plt.show()

if 'Unemployment Rate' in data.columns:
    feature_columns = [col for col in data.columns if col not in ['Unemployment Rate', 'Date']]
    
    if feature_columns:  
        X = data[feature_columns]  
        y = data['Unemployment Rate']  

        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        model = LinearRegression()
        model.fit(X_train, y_train)

        y_pred = model.predict(X_test)

        mse = mean_squared_error(y_test, y_pred)
        print(f"\nMean Squared Error of the Model: {mse:.2f}")

        plt.figure(figsize=(8, 5))
        plt.scatter(y_test, y_pred, color='purple', alpha=0.7)
        plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--')
        plt.title("Predicted vs Actual Unemployment Rate")
        plt.xlabel("Actual Unemployment Rate (%)")
        plt.ylabel("Predicted Unemployment Rate (%)")
        plt.show()
    else:
        print("No feature columns available for prediction.")
else:
    print("Target column 'Unemployment Rate' not found.")
TASK 3

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import LabelEncoder, StandardScaler


data = pd.read_csv(r'C:/Users/HP/Downloads/car data.csv')

print("First Few Rows:")
print(data.head())

print("\nDataset Info:")
print(data.info())

print("\nSummary Statistics:")
print(data.describe())

print("\nMissing Values:")
print(data.isnull().sum())

label_encoder = LabelEncoder()

categorical_columns = ['Car_Name', 'Fuel_Type', 'Selling_type', 'Transmission']
for col in categorical_columns:
    data[col] = label_encoder.fit_transform(data[col])

data.drop(columns=['Car_Name'], axis=1, inplace=True)

X = data.drop('Selling_Price', axis=1)  
y = data['Selling_Price']  

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)

y_pred = model.predict(X_test_scaled)

mse = mean_squared_error(y_test, y_pred)
print(f"\nMean Squared Error (MSE): {mse:.2f}")

r2 = r2_score(y_test, y_pred)
print(f"R-squared: {r2:.2f}")

plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, color='purple', alpha=0.7)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--')
plt.title("Actual vs Predicted Car Prices")
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.show()

import joblib
joblib.dump(model, 'car_price_predictor_model.pkl')
